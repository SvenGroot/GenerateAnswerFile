<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationDescription" xml:space="preserve">
    <value>Generates answer files (unattend.xml and autounattend.xml) for unattended Windows installation.</value>
  </data>
  <data name="AutoLogonCountDescription" xml:space="preserve">
    <value>The number of times the user specified by -AutoLogonUser will be automatically logged on.</value>
  </data>
  <data name="AutoLogonPasswordDescription" xml:space="preserve">
    <value>The password of the user specified by -AutoLogonUser.</value>
  </data>
  <data name="AutoLogonUserDescription" xml:space="preserve">
    <value>The name of a user to automatically log on, in the format 'domain\user', or just 'user' for local users. If not specified, automatic log-on will not be used.</value>
  </data>
  <data name="CategoryDomain" xml:space="preserve">
    <value>Domain options:</value>
  </data>
  <data name="CategoryInstall" xml:space="preserve">
    <value>Installation options:</value>
  </data>
  <data name="CategoryOther" xml:space="preserve">
    <value>Other setup options:</value>
  </data>
  <data name="CategoryUserAccounts" xml:space="preserve">
    <value>User account options:</value>
  </data>
  <data name="ComputerNameDescription" xml:space="preserve">
    <value>The network name for the computer. If not specified, Windows will generate a default name. Any '#' characters in the name will be replaced with a random digit between 0 and 9. For example, 'PC-###' would be replaced with 'PC-123' (or some other random number).</value>
  </data>
  <data name="DisableCloudDescription" xml:space="preserve">
    <value>Disable Windows cloud consumer features. This prevents auto-installation of recommended store apps.</value>
  </data>
  <data name="DisableDefenderDesciption" xml:space="preserve">
    <value>Disable Windows Defender virus and threat protection.</value>
  </data>
  <data name="DisableServerManagerDescription" xml:space="preserve">
    <value>Do not automatically start Server Manager when logging on (Windows Server only).</value>
  </data>
  <data name="DisplayResolutionDescription" xml:space="preserve">
    <value>The display resolution, in the format 'width,height'. For example, '1920,1080'. If not specified, the default resolution is determined by Windows.</value>
  </data>
  <data name="DomainAccountsDescription" xml:space="preserve">
    <value>The name of a domain account to add to a local group, using the format 'group:domain\user', 'domain\user', 'group:user' or 'user'. If no group is specified, the user is added to the local Administrators group. You can specify multiple groups by separating them with semicolons. If no domain is specified, the user must be in the domain you're joining. Can have multiple values.</value>
  </data>
  <data name="DomainUserGroupValueDescription" xml:space="preserve">
    <value>[Group:][Domain\]User</value>
  </data>
  <data name="DomainUserValueDescription" xml:space="preserve">
    <value>Domain\User</value>
  </data>
  <data name="EnableRemoteDesktopDescriptoin" xml:space="preserve">
    <value>Turn on remote desktop, and create a Windows Defender Firewall rule to allow incoming connections.</value>
  </data>
  <data name="FeaturesDescription" xml:space="preserve">
    <value>The name of an optional feature to install. Use the PowerShell 'Get-WindowsOptionalFeature' command to get a list of valid feature names. Can have multiple values.</value>
  </data>
  <data name="FirstLogonCommandsDescription" xml:space="preserve">
    <value>A command to run during first logon. Can have multiple values. All commands are executed before the scripts specified by -FirstLogonScript, in the order specified.</value>
  </data>
  <data name="ImageIndexDescription" xml:space="preserve">
    <value>The index of the image in the WIM file to install. Use this for Windows editions not installed using a product key, such as those that use volume licensing. Use the PowerShell 'Get-WindowsImage' command to list all images in a .wim or .esd file.</value>
  </data>
  <data name="InstallDescription" xml:space="preserve">
    <value>The installation method to use.</value>
  </data>
  <data name="InstallToDiskDescription" xml:space="preserve">
    <value>The zero-based ID of the disk to install to. This disk will be wiped and repartitioned according to -Partition, or using the default layout if -Partition is not specified.</value>
  </data>
  <data name="InstallToPartitionDescription" xml:space="preserve">
    <value>The one-based ID of the partition to install to, on the disk specified by -InstallToDisk. If not specified and -Install is CleanEfi or CleanBios, Windows will be installed on the first regular data partition. If -Install is ExistingPartition, the default value is 3, which is appropriate for UEFI systems with the default partition layout.</value>
  </data>
  <data name="InvalidMethodCount" xml:space="preserve">
    <value>At least one installation method must be provided.</value>
  </data>
  <data name="JoinDomainDescription" xml:space="preserve">
    <value>The name of a domain to join. If not specified, the system will not be joined to a domain.</value>
  </data>
  <data name="JoinDomainPasswordDescription" xml:space="preserve">
    <value>The password of the user specified by -JoinDomainUser. This will be stored in plain text in the answer file.</value>
  </data>
  <data name="JoinDomainUserDescription" xml:space="preserve">
    <value>The name of a user with permission to join the domain specified by -JoinDomain. Use the format 'domain\user', or just 'user' if the user is a member of the domain you are joining.</value>
  </data>
  <data name="LanguageDescription" xml:space="preserve">
    <value>The language used for the UI language, and the input, system and user locales.</value>
  </data>
  <data name="LocalAccountsDescription" xml:space="preserve">
    <value>A local account to create, using the format 'group:name,password' or 'name,password'. Can have multiple values. If no group is specified, the user will be added to the Administrators group. You can specify multiple groups by separating them with semicolons.

If no local accounts are created, the user will be asked to create one during OOBE, making setup not fully unattended.</value>
  </data>
  <data name="LocalCredentialValueDescription" xml:space="preserve">
    <value>[Group:]Name,Password</value>
  </data>
  <data name="NumberValueDescription" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="OnlineHelpDescription" xml:space="preserve">
    <value>Shows additional help in your web browser, including example usage.</value>
  </data>
  <data name="OnlineHelpUrl" xml:space="preserve">
    <value>https://github.com/SvenGroot/GenerateAnswerFile</value>
  </data>
  <data name="OptionalDomainUserValueDescription" xml:space="preserve">
    <value>[Domain\]User</value>
  </data>
  <data name="OUPathDescription" xml:space="preserve">
    <value>The organizational unit to use when joining the domain specified by -JoinDomain.</value>
  </data>
  <data name="OutputFileDescription" xml:space="preserve">
    <value>The path and file name to write the answer file to. If not specified, the generated answer file is written to the console.</value>
  </data>
  <data name="PartitionsDescription" xml:space="preserve">
    <value>A partition to create on the disk specified by -InstallToDisk. Can have multiple values.

Use the format 'label:size' or 'label:size[fs]', where label is the volume label, size is the size of the partition, and fs is an optional file system like FAT32 or NTFS. Sizes can use multiple-byte units such as GB, and will be truncated to whole megabytes. For example 'System:100MB', 'Windows:128GB', or 'Data:16GB[FAT32]'.

Use '*' as the size to extend the partition to fill the remainder of the disk (e.g. 'Windows:*').

Use the following labels to create special partitions: 'System', 'MSR', 'WinRE', and 'Recovery'.

If not specified, the default partition layout for the method specified by -Install is used.</value>
  </data>
  <data name="PartitionsValueDescription" xml:space="preserve">
    <value>Label:Size</value>
  </data>
  <data name="PathValueDescription" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="ProcessorArchitectureDescription" xml:space="preserve">
    <value>The processor architecture of the Windows edition you're installing. Use 'amd64' for 64 bit Intel and AMD processors, 'x86' for 32 bit, and 'arm64' for ARM-based devices.</value>
  </data>
  <data name="ProductKeyDescription" xml:space="preserve">
    <value>The product key used to select what edition to install, and to activate Windows.</value>
  </data>
  <data name="FirstLogonScriptsDescription" xml:space="preserve">
    <value>The full path of a Windows PowerShell script to run during first log-on, plus arguments. Can have multiple values. Scripts are executed after the commands specified by -FirstLogonCommand, in the order specified.</value>
  </data>
  <data name="TimeZoneDescription" xml:space="preserve">
    <value>The time zone that Windows will use. Run 'tzutil /l' for a list of valid values.</value>
  </data>
  <data name="UsageHelpFooterFormat" xml:space="preserve">
    <value>Options can also be specified by piping a JSON file to the standard input. In this case, only the -OutputFile argument can be used.

For more information, as well as usage examples, run '{0} -OnlineHelp', or see: https://github.com/SvenGroot/GenerateAnswerFile</value>
  </data>
  <data name="UsageHelpMoreInfoFormat" xml:space="preserve">
    <value>Run '{0} -Help' or '{0} -OnlineHelp' for more information, or see: https://github.com/SvenGroot/GenerateAnswerFile</value>
  </data>
  <data name="ValidateInstallMethodErrorFormat" xml:space="preserve">
    <value>The '{0}' argument may only be used if -Install is set to {1}.</value>
  </data>
  <data name="ValidateInstallMethodUsageFormat" xml:space="preserve">
    <value>May only be used if -Install is set to {0}.</value>
  </data>
  <data name="WindowsVersionDescription" xml:space="preserve">
    <value>The exact version and build number (e.g. '10.0.22621.1') of the OS being installed. This argument is only used when -Feature is specified.</value>
  </data>
  <data name="JsonUsageFooter" xml:space="preserve">
    <value>JSON input was found; additional command line arguments are available if JSON input is not provided. For more information, see: https://github.com/SvenGroot/GenerateAnswerFile</value>
  </data>
  <data name="JoinDomainProvisioningFileDescription" xml:space="preserve">
    <value>The path to a file containing provisioned account data to join the domain. This file can be created using the command 'djoin.exe /provision /domain domainname /machine machinename /savefile filename'.</value>
  </data>
  <data name="RequiresAnyOtherErrorFormat" xml:space="preserve">
    <value>The argument '{0}' must be used together with one of: {1}.</value>
  </data>
  <data name="RequiresAnyOtherUsageHelpFormat" xml:space="preserve">
    <value>Must be used with one of: {0}.</value>
  </data>
  <data name="JoinDomainOfflineDescription" xml:space="preserve">
    <value>Join the domain during the offlineServicing pass of Windows setup, rather than the specialize pass.</value>
  </data>
  <data name="AdministratorPasswordDescription" xml:space="preserve">
    <value>The password to use for the built-in local Administrator account. If not specified, the Administrator account will be disabled by default.</value>
  </data>
</root>